import pygame
import sys

pygame.init()

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Galaga Clone')
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 40))
        self.image.fill((0, 255, 0))  # Green color
        self.rect = self.image.get_rect(midbottom=(SCREEN_WIDTH / 2, SCREEN_HEIGHT - 10))
        self.speed = 5

    def update(self, keys_pressed):
        if keys_pressed[pygame.K_LEFT]:
            self.rect.x -= self.speed
        if keys_pressed[pygame.K_RIGHT]:
            self.rect.x += self.speed
        # Keep the player within screen bounds
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > SCREEN_WIDTH:
            self.rect.right = SCREEN_WIDTH
class Enemy(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((40, 30))
        self.image.fill((255, 0, 0))  # Red color
        self.rect = self.image.get_rect(topleft=(x, y))
        self.speed = 2

    def update(self):
        self.rect.x += self.speed
        # Change direction at screen edges and move down
        if self.rect.right >= SCREEN_WIDTH or self.rect.left <= 0:
            self.speed *= -1
            self.rect.y += 20  # Move down when changing direction
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((5, 10))
        self.image.fill((255, 255, 0))  # Yellow color
        self.rect = self.image.get_rect(center=(x, y))
        self.speed = -10

    def update(self):
        self.rect.y += self.speed
        # Remove bullet if it goes off-screen
        if self.rect.bottom < 0:
            self.kill()
# Sprite Groups
all_sprites = pygame.sprite.Group()
player_group = pygame.sprite.Group()
enemy_group = pygame.sprite.Group()
player_bullets = pygame.sprite.Group()
enemy_bullets = pygame.sprite.Group()

# Create player
player = Player()
all_sprites.add(player)
player_group.add(player)

# Function to create a fleet of enemies
def create_enemies():
    enemy_speed = 2
    for row in range(3):
        for col in range(8):
            enemy = Enemy(80 + col * 80, 50 + row * 60, enemy_speed)
            all_sprites.add(enemy)
            enemy_group.add(enemy)

create_enemies()

# Game variables
score = 0
font = pygame.font.Font(None, 36)

# Load sounds
explosion_sound = pygame.mixer.Sound('assets/explosion.wav')

running = True
while running:
    clock.tick(60)  # 60 FPS

    # Event Handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        # Player shooting
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                bullet = player.shoot()
                all_sprites.add(bullet)
                player_bullets.add(bullet)

    # Get pressed keys
    keys_pressed = pygame.key.get_pressed()

    # Update
    player.update(keys_pressed)

    # Update enemies and possibly add enemy bullets
    for enemy in enemy_group:
        bullet = enemy.update()
        if bullet:
            all_sprites.add(bullet)
            enemy_bullets.add(bullet)

    player_bullets.update()
    enemy_bullets.update()

    # Collision Detection
    # Player bullets hit enemies
    hits = pygame.sprite.groupcollide(player_bullets, enemy_group, True, True)
    for hit in hits:
        score += 100
        explosion_sound.play()

    # Enemy bullets hit player
    if pygame.sprite.spritecollide(player, enemy_bullets, True):
        player.lives -= 1
        if player.lives <= 0:
            print("Game Over")
            running = False

    # Enemies collide with player
    if pygame.sprite.spritecollide(player, enemy_group, True):
        player.lives -= 1
        if player.lives <= 0:
            print("Game Over")
            running = False

    # Rendering
    screen.fill((0, 0, 0))  # Clear screen with black
    all_sprites.draw(screen)

    # Display Score and Lives
    score_text = font.render(f"Score: {score}", True, (255, 255, 255))
    lives_text = font.render(f"Lives: {player.lives}", True, (255, 255, 255))
    screen.blit(score_text, (10, 10))
    screen.blit(lives_text, (SCREEN_WIDTH - 150, 10))

    pygame.display.flip()

    # Check for Win Condition
    if not enemy_group:
        print("You Win!")
        running = False

pygame.quit()
sys.exit()
